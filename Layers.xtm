;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; SETUP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; set it all up
(sys:load "examples/sharedsystem/setup.xtm")
(analogue_reset syn1)
(analogue_reset syn2)

;; gotta go fast
(*metro* 'set-tempo 110)

;; load up the kick and snare samples
(sampler-populate-slot samp1 "assets/samples/808/36.aif" *gm-kick* 0 0 0 1)
(sampler-populate-slot samp1 "assets/samples/808/38.aif" *gm-snare* 0 0 0 1)
(sampler-populate-slot samp1 "assets/samples/808/44.aif" *gm-open-hi-hat* 0 0 0 1)
(set_reverb samp1 0.4 .9 1000.0 .76)

;; setup bass synth
(set_osc syn1 1 .4 PARAM_SAW 1.006 0.5 0.0)
(set_osc syn1 2 1 PARAM_SINE .5000 0.0 0.0)
(set_osc syn1 3 1.5 PARAM_SINE 1.000 0.0 0.0)
(set_amp_env syn1 20 1400 .25 200.0)
(set_filter_frq syn1 5000.0)
(set_filter_res syn1 0.2)
(set_lfo syn1 PARAM_LFO1 3000 .05)
(set_mod_matrix syn1 PARAM_LFO1 PARAM_FILTER_FRQ 1)
(set_reverb syn1 0.4 .7 9000.0 .96)

;; play the kick/snare beat
(:> beat 2 0
  (play samp1 @1 120 dur)
  (list *gm-kick* *gm-snare*))
(:> hat .25 0
  (play samp1 @1 90 dur)
  (list *gm-open-hi-hat*))

;; play the bass the old way
(:> bass 8 0
  (play syn1 @1 @2 dur)
   (list a3 a3 a3 a3
         g3 g3 g3 g3
         f3 f3 f3 f3
         f3 f3 f3 f3)
  (list 100 95 90 85))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; CHORD DEFINITIONS - BASS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; setup chord type: contains a root and a type e.g., (chord c3 "maj")
(define (chord root type)
  (list root type))

;; get the root note for a chord
(define (get-root chord)
  (list-ref chord 0))

;; get the type of a given chord
(define (get-type chord)
  (list-ref chord 1))

;; define our progression, each chord of the form (chord note type)
(define progression (list
  (chord a3 "min")
  (chord g3 "maj")
  (chord f3 "maj")
  (chord g3 "maj")
))

;; get root note of the chord at the given index in the progression
(define (prog-root idx)
  (get-root (list-ref progression idx)))

;; play the bass the slightly better way
(:> bass 8 0
  (play syn1 @1 @2 dur)
   (list (prog-root 0) (prog-root 0) (prog-root 0) (prog-root 0)
         (prog-root 1) (prog-root 1) (prog-root 1) (prog-root 1)
         (prog-root 2) (prog-root 2) (prog-root 2) (prog-root 2) 
         (prog-root 3) (prog-root 3) (prog-root 3) (prog-root 3))
  (list 100 95 90 85))

;; play the bass with repeats
(:> bass 8 0
  (play syn1 @1 @2 dur)
   (list (nof 4 (prog-root 0))
         (nof 4 (prog-root 1))
         (nof 4 (prog-root 2))
         (nof 4 (prog-root 3)))
  (list (list 100 95 90 85)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; DEFINITIONS - ARP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; setup arp synth
(set_osc syn2 1 .6 PARAM_SAW 1.000 0.0 0.0)
(set_osc syn2 2 .4 PARAM_SAW 1.005 0.0 0.0)
(set_amp_env syn2 20 1500 0 1500.0)
(set_filter_frq syn2 9000.0)
(set_filter_res syn2 0.0)
(set_lfo syn2 PARAM_LFO1 2000 2)
(set_mod_matrix syn2 PARAM_LFO1 PARAM_FILTER_FRQ 1)
(set_reverb syn2 0.4 .7 9000.0 .96)

;; for example purposes only
(:> arp 2 0 (play syn2 @1 100 dur)
  (list e4 g4))

;; setup chord mappings
(define (chord-library type)
  (if (equal? type "maj") (list 0 4 7 12)
    (if (equal? type "min") (list 0 3 7 12)
     (if (equal? type "sus") (list 0 4 7 14)
      (if (equal? type "maj7") (list 0 4 7 11))))))

;; helper for the chord arpeggiator - shift up an octave and up an interval
(define (shift-interval-func note)
  (lambda (n) (+ note n 12)))

;; arpeggiate a chord - map the chord intervals to the note
(define (arp-chord chord)
  (map
    (shift-interval-func (get-root chord))
    (chord-library (get-type chord))))

;; get arpeggiated list of notes for the chord in th eprogression
(define (prog-arp idx)
  (arp-chord (list-ref progression idx)))

;; play the arp
(:> arp 16 0 (play syn2 @1 100 dur)
  (list (nof 4 (prog-arp 0))
        (nof 4 (prog-arp 1))
        (nof 4 (prog-arp 2))
        (nof 4 (prog-arp 3))))

;; stop playing
(:| beat 4 0 (play samp1 @1 100 dur) '())
(:| hat 4 0 (play samp1 @1 100 dur) '())
(:| bass 16 0 (play syn1 @1 100 dur) '())
(:| arp 16 0 (play syn1 @1 100 dur) '())
